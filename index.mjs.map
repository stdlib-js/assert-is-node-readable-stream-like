{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nimport isNodeStreamLike from '@stdlib/assert-is-node-stream-like';\n\n\n// MAIN //\n\n/**\n* Tests if a value is Node readable stream-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is Node readable stream-like\n*\n* @example\n* import transformStream from '@stdlib/streams-node-transform';\n*\n* var stream = transformStream();\n*\n* var bool = isNodeReadableStreamLike( stream );\n* // returns true\n*\n* bool = isNodeReadableStreamLike( {} );\n* // returns false\n*/\nfunction isNodeReadableStreamLike( value ) {\n\treturn (\n\t    // Must be stream-like:\n\t\t(isNodeStreamLike( value ) &&\n\n\t\t// Should have readable stream methods:\n\t\ttypeof value._read === 'function' && // Should have readable stream state:\n\t\ttypeof value._readableState === 'object')\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNodeReadableStreamLike;\n"],"names":["isNodeReadableStreamLike","value","isNodeStreamLike","_read","_readableState"],"mappings":";;qGA8CA,SAASA,EAA0BC,GAClC,OAEEC,EAAkBD,IAGI,mBAAhBA,EAAME,OACmB,iBAAzBF,EAAMG,cAEf"}